use dummy as beliefs.

%%% Init module is only ran once
module tygronInit {
		
		%%% STAKEHOLDER PERCEPT
		%%% Stakeholder information doens't update during the session.

		forall percept(stakeholders(List)), bel(member(SubList, List), 
			member(stakeholder(ShID,Name,StartBudget,Income), SubList)) do insert(stakeholder(ShID,Name,StartBudget,Income)).
		
		%%% INDICATORLINK PERCEPT
		%%% Stakeholder information doens't update during the session.
		
		forall percept(stakeholders(List)), bel(member(SubList, List), member(indicatorLink(ShID,IndWeights), SubList)) 
			do insert(indicatorLink(ShID,IndWeights)).
		
		%%% INDICATOR PERCEPT
		%%% Indicators should be initialized to be used by the rule in the event module.
		
		forall percept(indicators(List)), bel(member(indicator(ID,Current,Target),List))
			do insert(indicator(ID,Current,Target)).
		
		%%% ZONE PERCEPT
		%%% For the same reason as indicator. It should be initialized before going to the event module rules.
		
		forall percept(zones(List)), bel(member(zone(ID,Name,Floors,Size,CategoriesList),List)) 
			do insert(zone(ID,Name,Floors,Size,CategoriesList)).
		
		%%% BUILDING PERCEPT 
		%%% Fallback insert rule, so we're sure they get inserted in the first cycle.
		forall percept(buildings(List)), bel(member(building(ID,Name,OwnerID,ConstructionYear,CategoriesList,Floors),List))
			do insert(building(ID,Name,OwnerID,ConstructionYear,CategoriesList,Floors)).
		
		%%% LAND PERCEPT
		%%% Fallback insert rule, so we're sure they get inserted in the first cycle.
		forall percept(lands(List)), bel(member(land(ID, OwnerID, MultiPolygon), List))
			do insert(land(ID,OwnerID,MultiPolygon)).
			
		%%% REQUEST PERCEPT
		%%% Fallback insert rule, so we're sure they get inserted in the first cycle.
		%%  CAN BE WRONG RULE, NOT ABLE TO TEST YET.
		forall percept(requests(List)), bel(member(request(IDType,AnswerList),List))
			do insert(request(IDType,AnswerList)).
		
		%%% ACTION PERCEPT
		%%% Action insert rule, since the action percepts already has actions in it during the first cycle.
		%The FunctionList cannot  be the SpecialOptions list. 
		forall percept(actions(List)), bel(member(["action", ID, FunctionList, SpecialOptions], List), member(X, FunctionList), is_list(X))
			do insert(action(ID, FunctionList, SpecialOptions)).
		
		%%% Action insert rule, since the action percepts already has actions in it during the first cycle.
		%The FunctionList needs to be the SpecialOptions list. 
		forall percept(actions(List)), bel(member(["action", ID, FunctionList, SpecialOptions], List), member(X, FunctionList), not(is_list(X)))
			do insert(action(ID, [], FunctionList)).
		
		%%% Code from Wouter%%%
		% Inserts an initial belief so the send on change rules work which are mentioned in the event module.
		if true then insert(settings([])).
		if true then insert(functions([])).
		
}
