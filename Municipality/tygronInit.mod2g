use dummy as beliefs.
use dummy as knowledge.
use kapafunctions as beliefs.
%The init module is ran only once at the startup of the agent.
%Order of the module is standard linearall
module tygronInit {
		%MY_STAKEHOLDER_ID PERCEPT
		%Agents don't switch from stakeholder, so this only needs to be inserted once and should never change
		if percept(my_stakeholder_id(StakeholderID)) then insert(my_stakeholder_id(StakeholderID)).
		
		%STAKEHOLDER PERCEPT
		%Stakeholder information doens't update during the session.
		forall percept(stakeholders(List)), bel(member(SubList, List), 
			member(stakeholder(StakeholderID,Name,StartBudget,Income), SubList)) do insert(stakeholder(StakeholderID,Name,StartBudget,Income)).
		
		%FUNCTION PERCEPT
		%There will not be a change in functions during a session.
		
		forall percept(functions(FunctionList)), bel(member([FunctionName,FunctionID,List], FunctionList))
			do insert(function(FunctionName,FunctionID,List)).
		
		%INDICATORLINK PERCEPT
		%Stakeholder information doens't update during the session.
		
		forall percept(stakeholders(List)), bel(member(SubList, List), member(indicatorLink(StakeholderID,IndWeights), SubList)) 
			do insert(indicatorLink(StakeholderID,IndWeights)).
		
		%My_Indicator belief to store the indicatorIDs and indicatorWeights of the stakeholder itself.
		forall bel(indicatorLink(StakeholderID, IndWeights), my_stakeholder_id(StakeholderID), member(indicatorWeights(IndicatorID, IndicatorName,IndicatorWeight), IndWeights))
			do insert(my_indicator(IndicatorID, IndicatorWeight)) + print(IndWeights).
		
		%INDICATOR PERCEPT
		%Indicators should be initialized to be used by the rule in the event module.
		
		forall percept(indicators(List)), bel(member(indicator(IndicatorID,Current,Target,ZoneIndicatorsList),List))
			do insert(indicator(IndicatorID,Current,Target,ZoneIndicatorsList)).
		
		%ZONE PERCEPT
		%For the same reason as indicator. It should be initialized before going to the event module rules.
		
		forall percept(zones(List)), bel(member(zone(ZoneID,Name,Floors,Size,CategoriesList),List)) 
			do insert(zone(ZoneID,Name,Floors,Size,CategoriesList)).
		
		%BUILDING PERCEPT 
		%Fallback insert rule, so we're sure they get inserted in the first cycle.
		forall percept(buildings(List)), bel(member(building(BuildingID,Name,OwnerID,ConstructionYear,CategoriesList,FuncID,Floors),List))
			do insert(building(BuildingID,Name,OwnerID,ConstructionYear,CategoriesList,FuncID,Floors)).
		
		%LAND PERCEPT
		%Fallback insert rule, so we're sure they get inserted in the first cycle.
		forall percept(lands(List)), bel(member(land(LandID, OwnerID, MultiPolygon,ZoneList,Size), List))
			do insert(land(LandID,OwnerID,MultiPolygon,ZoneList,Size)).
			
		%REQUEST PERCEPT
		%Fallback insert rule, so we're sure they get inserted in the first cycle.
		%CAN BE WRONG RULE, NOT ABLE TO TEST YET.
		forall percept(requests(List)), bel(member(request(IDType,AnswerList),List))
			do insert(request(IDType,AnswerList)).
		
		
		%FEELING BELIEF
		% to track if a stakeholder does things that improve our indicators
		% if the stakeholder does well for us, the stakeholder can get permits for
		% things that do not help our indicators directly
		
		forall bel(stakeholder(StakeholderID,Name,StartBudget,Income), not(my_stakeholder_id(StakeholderID))) do
			insert(feeling(StakeholderID, 1)).
		
		
		%Code from Wouter
		%Inserts an initial belief so the send on change rules work which are mentioned in the event module.
		if true then insert(settings([])).
		if true then insert(functions([])).
		
}
