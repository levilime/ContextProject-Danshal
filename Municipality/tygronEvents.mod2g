use dummy as knowledge.
use green as module.
use azc as module.
use negotiation as module.

module tygronEvents {
	
	%INDICATOR PERCEPT
	%Indicator should not be able to be added or deleted during a session. But their current value can change
	%during session.
		
	%Every cycle deletes old values of the indicator and inserts the new one if there are any updates.
	forall percept(indicators(List)), bel(indicator(IndicatorID,OldCurrent,OldTarget,OldZoneIndicatorsList), 
		member(indicator(IndicatorID,NewCurrent,NewTarget,NewZoneIndicatorsList),List)) 
		do delete(indicator(IndicatorID,OldCurrent,OldTarget,OldZoneIndicatorsList)) 
		+ insert(indicator(IndicatorID,NewCurrent,NewTarget,NewZoneIndicatorsList)).
	
	%ACTIONLOG PERCEPT
	%Get information about the change in indicators of performed actions.
	
	%Delete the old one for each stakeholder
	forall percept(action_logs(ActList)), bel(member(actionlog(StakeholderID,_,_,_),ActList), actionlog(StakeholderID,OldDescription,OldActionID,OldIncList))
		do delete(actionlog(StakeholderID,OldDescription,OldActionID,OldIncList)).
	
	%Add the new one for each stakeholde.
	forall percept(action_logs(ActList)), bel(member(actionlog(StakeholderID,Description,ActionID,IncList),ActList))
		do insert(actionlog(StakeholderID,Description,ActionID,IncList)).
	
	%ZONE PERCEPT
	%Zones should not be able to be added or deleted during a session. But they should be able to be changed.
	
	%Every cycle deletes old values of the zones and inserts the new one if there are any updates.
	forall percept(zones(List)), bel(zone(ZoneID,OldName,OldFloors,OldSize,OldCategoriesList), 
		member(zone(ZoneID,NewName,NewFloors,NewSize,NewCategoriesList),List)) 
		do delete(zone(ZoneID,OldName,OldFloors,OldSize,OldCategoriesList)) 
		+ insert(zone(ZoneID,NewName,NewFloors,NewSize,NewCategoriesList)).
	
	%BUILDING PERCEPT
	%Buildings can be removed (destroyed), added (simply built) and changed (upgrades).
	
	%If new buildings appear in the list, add them to our belief base.
	forall percept(buildings(List)), bel(member(building(BuildingID,Name,OwnerID,ConstructionYear,CategoriesList,FuncID,Floors),List), 
		not(building(BuildingID,_,_,_,_,_,_))) do insert(building(BuildingID,Name,OwnerID,ConstructionYear,CategoriesList,FuncID,Floors)).
		
	%Every cycle deletes old values of the buildings and insert the new one if there are any updates
	forall percept(buildings(List)), bel(building(BuildingID,OldName,OldOwnerID,OldConstructionYear,OldCategoriesList,OldFuncID,OldFloors), 
		member(building(BuildingID, NewName,NewOwnerID,NewConstructionYear,NewCategoriesList,NewFuncID,NewFloors),List)) 
		do delete(building(BuildingID,OldName,OldOwnerID,OldConstructionYear,OldCategoriesList,OldFuncID,OldFloors)) + 
		insert(building(BuildingID, NewName,NewOwnerID,NewConstructionYear,NewCategoriesList,NewFuncID,NewFloors)).
		
	%Every cycle checks if a building is no longer there. If so, it deletes the building belief from the belief base
	forall percept(buildings(List)), bel(building(BuildingID,OldName,OldOwnerID,OldConstructionYear,OldCategoriesList,OldFuncID,OldFloors),
		not(member(building(BuildingID,_,_,_,_,_,_),List))) do 
		delete(building(BuildingID,OldName,OldOwnerID,OldConstructionYear,OldCategoriesList,OldFuncID,OldFloors)).
	
	%LAND PERCEPT
	%Lands can be added (one stakeholder could only buy one part of a patch of land of another stakeholder,
	%creating 2 new patches which should have different ID's). Lands can be changed (change of owner for example).
	%Lands should also be able to get deleted (2 patches of land with different ID's next to eachother could be merged
	%to one land with 1 ID with a bigger multipolygon).
	
	%If new lands appear in the list, add them to our belief base.
	forall percept(lands(List)), bel(member(land(LandID,OwnerID,MultiPolygon,ZoneIDList,Size),List), not(land(LandID,_,_,_,_)))
		do insert(land(LandID,OwnerID,MultiPolygon,ZoneIDList,Size)).
		
	%Every cycle deletes old values of the lands and inserts new information about the lands if there are any updates.
	forall percept(lands(List)), bel(land(LandID,OldOwnerID,OldMultiPolygon,OldZoneList,OldSize),
		member(land(LandID,NewOwnerID,NewMultiPolygon,NewZoneList,NewSize), List))
		do delete(land(LandID,OldOwnerID,OldMultiPolygon,OldZoneList,OldSize)) + insert(land(LandID,NewOwnerID,NewMultiPolygon,NewZoneList,NewSize)).
	
	%Every cycle checks if a piece of land is no longer there)
	forall percept(lands(List)), bel(land(LandID,OwnerID,OldMultiPolygon,OldZoneList,OldSize), not(member(land(LandID,_,_,_,_),List)))
		do delete(land(LandID,OwnerID,OldMultiPolygon,OldZoneList,OldSize)).
		
	%Request PERCEPT
	%Only put those requests in the belief base that we need to answer and has size and price.
	%Instead of the regular price calculate the price per squared meter.
	forall percept(requests(List)), bel(member(request("INTERACTION", RequestType, ID, ContentLinkID, _, ActionlogIDs, Price, Multipolygon, AreaSize, AnswerList),List),
		member(request("INFORMATION", RequestType, _, ContentLinkID, [SenderID|_], _, _, _,  _, _), List), not(AreaSize == "NO_SIZE"), not(Price == "NO_PRICE") , CalcPrice is Price / AreaSize)
		do insert(open_request(RequestType, ID, ContentLinkID, SenderID, ActionlogIDs, CalcPrice, Multipolygon, AreaSize, AnswerList)).
		
	%Only put those requests in the belief base that we need to answer has no size or no price.
	forall percept(requests(List)), bel(member(request("INTERACTION", RequestType, ID, ContentLinkID, _, ActionlogIDs, Price, Multipolygon, AreaSize, AnswerList),List),
		member(request("INFORMATION", RequestType, _, ContentLinkID, [SenderID|_], _, _, _,  _, _), List), (AreaSize == "NO_SIZE"; Price == "NO_PRICE"))
		do insert(open_request(RequestType, ID, ContentLinkID, SenderID, ActionlogIDs, Price, Multipolygon, AreaSize, AnswerList)).
		
	%Percept rules by Wouter Pasman
	%Deletes the old functions list and insert the new one if there is an update of the functions
	if percept(functions(X)), bel(functions(Y)) then delete(functions(Y)) + insert(functions(X)).
	%Deletes the old settings list and insert the new one if there is an update of the settings
	if percept(settings(X)), bel(settings(Y)) then delete(settings(Y)) + insert(settings(X)).
	
	%If we don't have enough green yet so our target is made, go to the module handling that.
	if bel(not(specificIndicatorCompleted('Gemeente Groen'))) then green.
	
	%If we don't have built a big enough AZC yet, go to the module handling that.
	if bel(not(specificIndicatorCompleted('AZC'))) then azc.

	%Go into the negotiation module.
	if true then negotiation.
}
